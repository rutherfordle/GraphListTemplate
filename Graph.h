#if !defined(_GRAPH_H_INCLUDE_)
#define _GRAPH_H_INCLUDE_
 
#include "List.h"

#define UNDEF -1
#define NIL 0
#define white 1
#define grey 2
#define black 3

/***************************** Exported Types *************************************/
typedef struct Graph * GraphRef;
 
 
/************** Constructors-Destructors ******************************************/
 
GraphRef newGraph(int n);
 

void freeGraph(GraphRef* pG);
 
 
/***************** Access functions ***********************************************/
/*
*  getOrder
*  Returns the number of vertices.
*/
int getOrder(GraphRef G);
 
/*
 * getSize
 * Returns the number of edges.
 */
int getSize(GraphRef G);
 
/*
 * getSource
 * Returns the source vertex most recently used in BFS(), or NIL if N/A
 */
int getSource(GraphRef G);
 
/*
 * getParent
 * Returns the parent of vertex u in the BFS generated by BFS(), or NIL.
 * PRE: 1<=u<=getOrder(G)
 */
int getParent(GraphRef G, int u);
 
int getDiscover(GraphRef G, int u);   /* Pre: 1<=u<=n=getOrder(G) */

int getFinish(GraphRef G, int u);   /* Pre: 1<=u<=n=getOrder(G) */ 

/****************************** Manipulation procedures ***************************/
 
/*
 * makeNull
 * deletes all edges in G, making it a null graph on n vertices.
 */
void makeNull(GraphRef G);
 
/*
 * addEdge
 * inserts a new edge joining u to v
 * (u is added to the adj list v, and v to u.
 * PRE: u, v both >=1 and <= getOrder(G)
 */


void addArc(GraphRef G, int u, int v);
 
/*
 * BFS - Breadth-first-search
 * sets parent, color, distance fields accordingly
 */
void DFS(GraphRef G, ListRef L);
 
/*************** Other Functions *************************************************/
 
/*
 * printGraph
 * prints adjacency list representation of G to out.
 */
GraphRef transpose(GraphRef G); 
GraphRef copyGraph(GraphRef G);

void printGraph(FILE* out, GraphRef G);

 
#endif
